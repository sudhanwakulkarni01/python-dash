# -*- coding: utf-8 -*-
"""python_dash_demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NA1GlXIhD8mxeHyqLthEHfY5Ib0PV8Th
"""

!pip install jupyter-dash -q

from dash import Dash, html

app = Dash(__name__)

app.layout = html.Div([
    html.Div(children='Hello World')
])

if __name__ == '__main__':
    app.run_server(port=8034, mode='inline')

# Import packages
from dash import Dash, html, dash_table
import pandas as pd

# Incorporate data
df = pd.read_excel('/self_made_rough_data_for_python_dash_demo.xlsx')

# Initialize the app

df.head(5)

# Import packages
from dash import Dash, html, dash_table, dcc, callback, Output, Input
import pandas as pd
import plotly.express as px

# Incorporate data
# df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')

# Initialize the app
app = Dash(__name__)

fnameDict = {"ALL":["ALL"],
            "MEALS AND BAKING SOL" : df[df["gmi_division_desc"] == "MEALS AND BAKING SOL"].manufacturing_platform_cd.unique() ,
             "MORNING FOODS": df[df["gmi_division_desc"] == "MORNING FOODS"].manufacturing_platform_cd.unique(),
             "CANADA YOGURT": df[df["gmi_division_desc"] == "CANADA YOGURT"].manufacturing_platform_cd.unique(),
             "CANADA FOODS": df[df["gmi_division_desc"] == "CANADA FOODS"].manufacturing_platform_cd.unique(),
             "SNACKS": df[df["gmi_division_desc"] == "SNACKS"].manufacturing_platform_cd.unique(),
             "NA FOODSERVICE": df[df["gmi_division_desc"] == "NA FOODSERVICE"].manufacturing_platform_cd.unique()
            }

names = list(fnameDict.keys())
nestedOptions = fnameDict[names[0]]

# App layout
app.layout = html.Div([
    html.Div(children='Predictions of Beginning DOS & Inventory For Next Three Months', style = {'text-align': 'center', 'border': '3px solid green', 'padding':'5px', 'font-size':'2vw'}),
    html.Hr(),
    html.Div(
        className = 'row', children= [
            html.Div(
                className = 'GMI_Division', children = [
                    html.Div(children=['GMI Division:'], style={'font-weight': 'bold', 'text-align': 'center', 'width':'90%', 'padding':'1px'}),
                    dcc.Dropdown(
                        # options = [{'label': "ALL", 'value': "ALL"}],
                        options=[{'label':name, 'value':name} for name in names],
                        value = list(fnameDict.keys())[0],
                        id='gmi_division_dropdown'
                        )
                    ], style=dict(width='50%')),
            html.Div(
                className = 'manufacturing_platform_cd', children = [
                    html.Div(children=['Manufacturing Platform:'], style={'font-weight': 'bold', 'text-align': 'center', 'width':'90%','padding':'1px'}),
                    dcc.Dropdown(id='manufacturing_platform_cd_dropdown', value = "ALL")], style=dict(width='50%'))
        ],style=dict(display='flex')
    ),
    html.Div([
        html.Div(['Select Output Type(default DOS):'], style={'font-weight': 'bold', "textAlign": "center", 'width':'100%', 'padding':'1px', 'padding-top':'1-px', 'font-size':'1vw'}),
        html.Hr(),
        dcc.RadioItems(options=[{'label':'Beginning DOS', 'value':'beginning_dos'}, {'label':'Beginning Inventory', 'value':'beginning_inv'}], value={'label':'Beginning DOS', 'value':'beginning_dos'}, id='controls-and-radio-item')]
    ),
    html.Hr(),
    html.Div(children='The Demo Predictions',style = {'text-align': 'center', 'padding':'1px', 'font-size':'1vw'}),
    # dash_table.DataTable(data=df.to_dict('records'), page_size=6),
    dcc.Graph(figure={}, id='controls-and-graph')
])

@app.callback(
    dash.dependencies.Output('manufacturing_platform_cd_dropdown', 'options'),
    [dash.dependencies.Input('gmi_division_dropdown', 'value')]
)
def update_date_dropdown(name):
    mfg_plt_options = [{'label': i, 'value': i} for i in fnameDict[name]]
    mfg_plt_options.insert(0, {'label': "ALL", 'value': "ALL"})
    return mfg_plt_options

# Add controls to build the interaction
@callback(
    Output(component_id='controls-and-graph', component_property='figure'),
    [Input(component_id='gmi_division_dropdown', component_property='value'),
     Input(component_id='manufacturing_platform_cd_dropdown', component_property='value'),
     Input(component_id='controls-and-radio-item', component_property='value')]
)
def update_graph(col_chosen1, col_chosen2, radio_1):
    dff = df.copy()

    if col_chosen1!="ALL":
      dff = dff[dff["gmi_division_desc"] == col_chosen1]
    if col_chosen2!="ALL" :
      dff = dff[dff["manufacturing_platform_cd"] == col_chosen2]

    color_discrete_map = {'Feb' :'Green','Mar':'Green', 'Apr':'Green', 'May':'Green', 'Jun':'Green', 'Jul':'Green', 'Aug':'Green', 'Sep':'Green', 'Oct':'Blue', 'Nov': 'Blue', 'Dec':'Blue'}
    # print(colors)
    if radio_1 == 'beginning_inv':
      fig = px.histogram(dff, x='fiscal_month_abbreviation_desc', y='beginning_inv', histfunc='sum',color="fiscal_month_abbreviation_desc", color_discrete_map=color_discrete_map )
      fig.update_layout(
        xaxis_title="Months",
        yaxis_title="Beginning Inventory",
        title="Beginning Inventory vs Months"
      )
    else:
      fig = px.histogram(
          dff, x='fiscal_month_abbreviation_desc',
          y='beginning_dos',
          histfunc='avg',
          color="fiscal_month_abbreviation_desc", color_discrete_map=color_discrete_map
          )
      fig.update_layout(
        xaxis_title="Months",
        yaxis_title="Beginning DOS",
        title="Beginning DOS vs Months"
      )
    fig.update(layout_showlegend=False)
      # fig.update_traces(marker_color="red", selector={"fiscal_month_abbreviation_desc": "Feb"})
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(port=8034, mode='inline')

colors = ['lightslategray',] * 11
colors[9] = 'crimson'
print(colors)

